// generated by Fast Light User Interface Designer (fluid) version 1.0308

#include <nl_types.h>
// Initialize I18N stuff now for menus...
#include <locale.h>
static char *_locale = setlocale(LC_MESSAGES, "");
static nl_catd _catalog = catopen("GUI", 0);
#include "GUI.h"

static void cb_About(Fl_Menu_*, void*) {
  about_window = make_about_window();
about_window->show();
}

unsigned char menu__i18n_done = 0;
Fl_Menu_Item menu_[] = {
 {"File", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"DSP parameters", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"About", 0,  (Fl_Callback*)cb_About, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Text_Display *debug_info_panel=(Fl_Text_Display *)0;

Fl_Button *btn_calculate=(Fl_Button *)0;

Fl_Button *btn_4t=(Fl_Button *)0;

Fl_Progress *c4t_progress=(Fl_Progress *)0;

Fl_Button *btn_calibrate=(Fl_Button *)0;

Fl_Progress *noise_generator_progress=(Fl_Progress *)0;

Fl_Button *csv_btn=(Fl_Button *)0;

Fl_Double_Window* make_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(695, 375, catgets(_catalog,1,1,"nbima"));
    w = o; if (w) {/* empty */}
    o->color((Fl_Color)55);
    o->labelsize(12);
    o->when(FL_WHEN_RELEASE_ALWAYS);
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 1150, 25);
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)53);
      if (!menu__i18n_done) {
        int i=0;
        for ( ; i<3; i++)
          if (menu_[i].label())
            menu_[i].label(catgets(_catalog,1,i+2,menu_[i].label()));
        menu__i18n_done = 1;
      }
      o->menu(menu_);
    } // Fl_Menu_Bar* o
    { debug_info_panel = new Fl_Text_Display(15, 290, 665, 70, catgets(_catalog,1,5,"Debug info"));
      debug_info_panel->box(FL_GTK_THIN_DOWN_FRAME);
      debug_info_panel->labelsize(11);
      debug_info_panel->textfont(4);
      debug_info_panel->textsize(11);
      debug_info_panel->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Text_Display* debug_info_panel
    { Fl_Group* o = new Fl_Group(160, 60, 155, 145);
      o->box(FL_BORDER_FRAME);
      o->color(FL_FOREGROUND_COLOR);
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(420, 65, 90, 65);
      o->box(FL_BORDER_FRAME);
      o->color(FL_FOREGROUND_COLOR);
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(485, 45, 195, 105, catgets(_catalog,1,6,"RTL-SDR"));
      o->box(FL_BORDER_BOX);
      o->color((Fl_Color)55);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(195, 129, 85, 91);
      o->box(FL_BORDER_FRAME);
      o->color(FL_FOREGROUND_COLOR);
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(140, 165, 195, 105, catgets(_catalog,1,7,"Corrected Spectrum"));
      o->box(FL_BORDER_BOX);
      o->color((Fl_Color)55);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      { btn_calculate = new Fl_Button(150, 235, 175, 25, catgets(_catalog,1,8,"Calculate"));
        btn_calculate->box(FL_GTK_UP_BOX);
        btn_calculate->color((Fl_Color)55);
        btn_calculate->labelsize(11);
      } // Fl_Button* btn_calculate
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(260, 45, 195, 105, catgets(_catalog,1,9,"4-terminal circuit"));
      o->box(FL_BORDER_BOX);
      o->color((Fl_Color)55);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      { btn_4t = new Fl_Button(270, 115, 175, 25, catgets(_catalog,1,10,"Measure"));
        btn_4t->box(FL_GTK_UP_BOX);
        btn_4t->color((Fl_Color)55);
        btn_4t->labelsize(11);
      } // Fl_Button* btn_4t
      { Fl_Progress* o = c4t_progress = new Fl_Progress(270, 53, 175, 17, catgets(_catalog,1,11,"Progress..."));
        c4t_progress->box(FL_GTK_DOWN_BOX);
        c4t_progress->selection_color((Fl_Color)180);
        c4t_progress->labelsize(11);
        c4t_progress->hide();
        o->value(32);
      } // Fl_Progress* c4t_progress
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(20, 45, 195, 105, catgets(_catalog,1,12,"Noise generator"));
      o->box(FL_BORDER_BOX);
      o->color((Fl_Color)55);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      { btn_calibrate = new Fl_Button(30, 115, 175, 25, catgets(_catalog,1,13,"Measure"));
        btn_calibrate->box(FL_GTK_UP_BOX);
        btn_calibrate->color((Fl_Color)55);
        btn_calibrate->labelsize(11);
      } // Fl_Button* btn_calibrate
      { Fl_Progress* o = noise_generator_progress = new Fl_Progress(30, 54, 175, 17, catgets(_catalog,1,14,"Progress..."));
        noise_generator_progress->box(FL_GTK_DOWN_BOX);
        noise_generator_progress->selection_color((Fl_Color)180);
        noise_generator_progress->labelsize(11);
        noise_generator_progress->hide();
        o->value(32);
      } // Fl_Progress* noise_generator_progress
      o->end();
    } // Fl_Group* o
    { csv_btn = new Fl_Button(250, 175, 75, 20, catgets(_catalog,1,15,"save to .csv"));
      csv_btn->box(FL_GTK_UP_BOX);
      csv_btn->color((Fl_Color)55);
      csv_btn->labelsize(10);
      csv_btn->labelcolor(FL_SELECTION_COLOR);
    } // Fl_Button* csv_btn
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Double_Window *about_window=(Fl_Double_Window *)0;

Fl_Double_Window* make_about_window() {
  { about_window = new Fl_Double_Window(270, 260);
    about_window->color((Fl_Color)55);
    { Fl_Help_View* o = new Fl_Help_View(0, 0, 270, 260, catgets(_catalog,1,16,"About"));
      o->box(FL_FLAT_BOX);
      o->load("../about.html");
    } // Fl_Help_View* o
    about_window->size_range(0, 0, 270, 260);
    about_window->end();
  } // Fl_Double_Window* about_window
  return about_window;
}

Fl_Slider *dc_coef_slider=(Fl_Slider *)0;

static void cb_dc_coef_slider(Fl_Slider* o, void*) {
  dc_coef_input->value(o->value());
}

Fl_Value_Input *dc_coef_input=(Fl_Value_Input *)0;

static void cb_dc_coef_input(Fl_Value_Input* o, void*) {
  dc_coef_slider->value(o->value());
}

Fl_Double_Window* make_dsp_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(330, 65, catgets(_catalog,1,17,"DSP parameters"));
    w = o; if (w) {/* empty */}
    o->hotspot(o);
    { dc_coef_slider = new Fl_Slider(150, 35, 170, 20);
      dc_coef_slider->type(1);
      dc_coef_slider->labelsize(12);
      dc_coef_slider->value(1);
      dc_coef_slider->callback((Fl_Callback*)cb_dc_coef_slider);
      dc_coef_slider->align(Fl_Align(FL_ALIGN_LEFT_TOP));
    } // Fl_Slider* dc_coef_slider
    { dc_coef_input = new Fl_Value_Input(150, 10, 170, 20, catgets(_catalog,1,18,"DC blocker coefficient"));
      dc_coef_input->labelsize(12);
      dc_coef_input->value(1);
      dc_coef_input->textsize(12);
      dc_coef_input->callback((Fl_Callback*)cb_dc_coef_input);
    } // Fl_Value_Input* dc_coef_input
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Double_Window *noise_mes_win=(Fl_Double_Window *)0;

GUI_Spectre *noise_spectre_box=(GUI_Spectre *)0;

Fl_Button *start_noise_scan=(Fl_Button *)0;

Fl_Button *stop_noise_scan=(Fl_Button *)0;

Fl_Value_Input *noise_lower_input=(Fl_Value_Input *)0;

Fl_Value_Input *noise_upper_input=(Fl_Value_Input *)0;

Fl_Double_Window* make_measurement_window() {
  { noise_mes_win = new Fl_Double_Window(800, 175, catgets(_catalog,1,19,"Noise generator"));
    noise_mes_win->color((Fl_Color)38);
    noise_mes_win->when(FL_WHEN_RELEASE_ALWAYS);
    { Fl_Group* o = new Fl_Group(0, 35, 800, 150);
      { noise_spectre_box = new GUI_Spectre(0, 35, 800, 140, catgets(_catalog,1,20,"Estimated noise spectrum"));
        noise_spectre_box->box(FL_FLAT_BOX);
        noise_spectre_box->color(FL_FOREGROUND_COLOR);
        noise_spectre_box->selection_color(FL_BACKGROUND_COLOR);
        noise_spectre_box->labeltype(FL_NO_LABEL);
        noise_spectre_box->labelfont(0);
        noise_spectre_box->labelsize(11);
        noise_spectre_box->labelcolor(FL_FOREGROUND_COLOR);
        noise_spectre_box->align(Fl_Align(FL_ALIGN_TOP));
        noise_spectre_box->when(FL_WHEN_RELEASE);
        Fl_Group::current()->resizable(noise_spectre_box);
      } // GUI_Spectre* noise_spectre_box
      o->end();
      Fl_Group::current()->resizable(o);
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(0, 0, 800, 35);
      { Fl_Group* o = new Fl_Group(5, 0, 285, 35);
        { start_noise_scan = new Fl_Button(5, 5, 25, 25, catgets(_catalog,1,21,">"));
          start_noise_scan->box(FL_GTK_UP_BOX);
          start_noise_scan->down_box(FL_GTK_DOWN_BOX);
          start_noise_scan->color((Fl_Color)106);
          start_noise_scan->selection_color((Fl_Color)106);
          start_noise_scan->labelfont(1);
          start_noise_scan->labelcolor((Fl_Color)62);
        } // Fl_Button* start_noise_scan
        { stop_noise_scan = new Fl_Button(35, 5, 25, 25, catgets(_catalog,1,22,"||"));
          stop_noise_scan->box(FL_GTK_UP_BOX);
          stop_noise_scan->down_box(FL_GTK_DOWN_BOX);
          stop_noise_scan->color(FL_DARK3);
          stop_noise_scan->selection_color((Fl_Color)36);
          stop_noise_scan->labelfont(5);
          stop_noise_scan->labelsize(10);
          stop_noise_scan->labelcolor((Fl_Color)80);
        } // Fl_Button* stop_noise_scan
        { noise_lower_input = new Fl_Value_Input(145, 5, 45, 25, catgets(_catalog,1,23,"MHz -"));
          noise_lower_input->box(FL_GTK_DOWN_BOX);
          noise_lower_input->color((Fl_Color)40);
          noise_lower_input->labelsize(12);
          noise_lower_input->labelcolor((Fl_Color)51);
          noise_lower_input->value(27);
          noise_lower_input->textsize(12);
          noise_lower_input->textcolor((Fl_Color)51);
          noise_lower_input->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Value_Input* noise_lower_input
        { Fl_Button* o = new Fl_Button(65, 5, 75, 25, catgets(_catalog,1,24,"save to .csv"));
          o->box(FL_GTK_UP_BOX);
          o->down_box(FL_GTK_DOWN_BOX);
          o->color(FL_DARK3);
          o->selection_color((Fl_Color)36);
          o->labelsize(10);
          o->labelcolor((Fl_Color)51);
        } // Fl_Button* o
        { noise_upper_input = new Fl_Value_Input(230, 5, 45, 25, catgets(_catalog,1,25,"MHz"));
          noise_upper_input->box(FL_GTK_DOWN_BOX);
          noise_upper_input->color((Fl_Color)40);
          noise_upper_input->labelsize(12);
          noise_upper_input->labelcolor((Fl_Color)51);
          noise_upper_input->value(1700);
          noise_upper_input->textsize(12);
          noise_upper_input->textcolor((Fl_Color)51);
          noise_upper_input->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Value_Input* noise_upper_input
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(310, 5, 490, 25);
        o->end();
        Fl_Group::current()->resizable(o);
      } // Fl_Group* o
      o->end();
    } // Fl_Group* o
    noise_mes_win->end();
  } // Fl_Double_Window* noise_mes_win
  return noise_mes_win;
}

Fl_Double_Window *c4t_mes_win=(Fl_Double_Window *)0;

GUI_Spectre *c4t_spectre_box=(GUI_Spectre *)0;

Fl_Button *start_c4t_scan=(Fl_Button *)0;

Fl_Button *stop_c4t_scan=(Fl_Button *)0;

Fl_Value_Input *c4t_lower_input=(Fl_Value_Input *)0;

Fl_Value_Input *c4t_upper_input=(Fl_Value_Input *)0;

Fl_Double_Window* make_4t_measurement_window() {
  { c4t_mes_win = new Fl_Double_Window(800, 175, catgets(_catalog,1,26,"4-terminal circuit"));
    c4t_mes_win->color((Fl_Color)38);
    c4t_mes_win->when(FL_WHEN_RELEASE_ALWAYS);
    { Fl_Group* o = new Fl_Group(0, 35, 800, 150);
      { c4t_spectre_box = new GUI_Spectre(0, 35, 800, 140, catgets(_catalog,1,27,"Estimated noise spectrum"));
        c4t_spectre_box->box(FL_FLAT_BOX);
        c4t_spectre_box->color(FL_FOREGROUND_COLOR);
        c4t_spectre_box->selection_color(FL_BACKGROUND_COLOR);
        c4t_spectre_box->labeltype(FL_NO_LABEL);
        c4t_spectre_box->labelfont(0);
        c4t_spectre_box->labelsize(11);
        c4t_spectre_box->labelcolor(FL_FOREGROUND_COLOR);
        c4t_spectre_box->align(Fl_Align(FL_ALIGN_TOP));
        c4t_spectre_box->when(FL_WHEN_RELEASE);
        Fl_Group::current()->resizable(c4t_spectre_box);
      } // GUI_Spectre* c4t_spectre_box
      o->end();
      Fl_Group::current()->resizable(o);
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(0, 0, 800, 35);
      { Fl_Group* o = new Fl_Group(5, 0, 285, 35);
        { start_c4t_scan = new Fl_Button(5, 5, 25, 25, catgets(_catalog,1,28,">"));
          start_c4t_scan->box(FL_GTK_UP_BOX);
          start_c4t_scan->down_box(FL_GTK_DOWN_BOX);
          start_c4t_scan->color((Fl_Color)106);
          start_c4t_scan->selection_color((Fl_Color)106);
          start_c4t_scan->labelfont(1);
          start_c4t_scan->labelcolor((Fl_Color)62);
        } // Fl_Button* start_c4t_scan
        { stop_c4t_scan = new Fl_Button(35, 5, 25, 25, catgets(_catalog,1,29,"||"));
          stop_c4t_scan->box(FL_GTK_UP_BOX);
          stop_c4t_scan->down_box(FL_GTK_DOWN_BOX);
          stop_c4t_scan->color(FL_DARK3);
          stop_c4t_scan->selection_color((Fl_Color)36);
          stop_c4t_scan->labelfont(5);
          stop_c4t_scan->labelsize(10);
          stop_c4t_scan->labelcolor((Fl_Color)80);
        } // Fl_Button* stop_c4t_scan
        { c4t_lower_input = new Fl_Value_Input(145, 5, 45, 25, catgets(_catalog,1,30,"MHz -"));
          c4t_lower_input->box(FL_GTK_DOWN_BOX);
          c4t_lower_input->color((Fl_Color)40);
          c4t_lower_input->labelsize(12);
          c4t_lower_input->labelcolor((Fl_Color)51);
          c4t_lower_input->value(27);
          c4t_lower_input->textsize(12);
          c4t_lower_input->textcolor((Fl_Color)51);
          c4t_lower_input->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Value_Input* c4t_lower_input
        { Fl_Button* o = new Fl_Button(65, 5, 75, 25, catgets(_catalog,1,31,"save to .csv"));
          o->box(FL_GTK_UP_BOX);
          o->down_box(FL_GTK_DOWN_BOX);
          o->color(FL_DARK3);
          o->selection_color((Fl_Color)36);
          o->labelsize(10);
          o->labelcolor((Fl_Color)51);
        } // Fl_Button* o
        { c4t_upper_input = new Fl_Value_Input(230, 5, 45, 25, catgets(_catalog,1,32,"MHz"));
          c4t_upper_input->box(FL_GTK_DOWN_BOX);
          c4t_upper_input->color((Fl_Color)40);
          c4t_upper_input->labelsize(12);
          c4t_upper_input->labelcolor((Fl_Color)51);
          c4t_upper_input->value(1700);
          c4t_upper_input->textsize(12);
          c4t_upper_input->textcolor((Fl_Color)51);
          c4t_upper_input->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Value_Input* c4t_upper_input
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(310, 5, 490, 25);
        o->end();
        Fl_Group::current()->resizable(o);
      } // Fl_Group* o
      o->end();
    } // Fl_Group* o
    c4t_mes_win->end();
  } // Fl_Double_Window* c4t_mes_win
  return c4t_mes_win;
}

Fl_Double_Window *corrected_window=(Fl_Double_Window *)0;

GUI_Spectre *corrected_spectre_box=(GUI_Spectre *)0;

Fl_Double_Window* make_corrected_spectrum_window() {
  { corrected_window = new Fl_Double_Window(800, 175, catgets(_catalog,1,33,"Corrected spectrum"));
    corrected_window->color((Fl_Color)38);
    corrected_window->when(FL_WHEN_RELEASE_ALWAYS);
    { Fl_Group* o = new Fl_Group(0, 0, 800, 185);
      { corrected_spectre_box = new GUI_Spectre(0, 0, 800, 175, catgets(_catalog,1,34,"Estimated noise spectrum"));
        corrected_spectre_box->box(FL_FLAT_BOX);
        corrected_spectre_box->color(FL_FOREGROUND_COLOR);
        corrected_spectre_box->selection_color(FL_BACKGROUND_COLOR);
        corrected_spectre_box->labeltype(FL_NO_LABEL);
        corrected_spectre_box->labelfont(0);
        corrected_spectre_box->labelsize(11);
        corrected_spectre_box->labelcolor(FL_FOREGROUND_COLOR);
        corrected_spectre_box->align(Fl_Align(FL_ALIGN_TOP));
        corrected_spectre_box->when(FL_WHEN_RELEASE);
        Fl_Group::current()->resizable(corrected_spectre_box);
      } // GUI_Spectre* corrected_spectre_box
      o->end();
      Fl_Group::current()->resizable(o);
    } // Fl_Group* o
    corrected_window->end();
  } // Fl_Double_Window* corrected_window
  return corrected_window;
}
