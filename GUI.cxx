// generated by Fast Light User Interface Designer (fluid) version 1.0308

#include <nl_types.h>
// Initialize I18N stuff now for menus...
#include <locale.h>
static char *_locale = setlocale(LC_MESSAGES, "");
static nl_catd _catalog = catopen("GUI", 0);
#include "GUI.h"

unsigned char menu__i18n_done = 0;
Fl_Menu_Item menu_[] = {
 {"File", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"DSP parameters", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"About", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Text_Display *debug_info_panel=(Fl_Text_Display *)0;

Fl_Button *btn_calibrate=(Fl_Button *)0;

Fl_Double_Window* make_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(696, 255, catgets(_catalog,1,1,"nbima"));
    w = o; if (w) {/* empty */}
    o->color((Fl_Color)55);
    o->labeltype(FL_NO_LABEL);
    o->labelsize(12);
    o->align(Fl_Align(FL_ALIGN_TOP));
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 1150, 25);
      o->box(FL_BORDER_BOX);
      if (!menu__i18n_done) {
        int i=0;
        for ( ; i<3; i++)
          if (menu_[i].label())
            menu_[i].label(catgets(_catalog,1,i+2,menu_[i].label()));
        menu__i18n_done = 1;
      }
      o->menu(menu_);
    } // Fl_Menu_Bar* o
    { debug_info_panel = new Fl_Text_Display(15, 170, 665, 70, catgets(_catalog,1,5,"Debug info"));
      debug_info_panel->labelsize(11);
      debug_info_panel->textsize(11);
      debug_info_panel->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Text_Display* debug_info_panel
    { Fl_Group* o = new Fl_Group(175, 60, 110, 65);
      o->box(FL_BORDER_FRAME);
      o->color(FL_FOREGROUND_COLOR);
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(15, 40, 195, 105, catgets(_catalog,1,6,"Noise generator"));
      o->box(FL_BORDER_BOX);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      { btn_calibrate = new Fl_Button(70, 110, 90, 25, catgets(_catalog,1,7,"Measure"));
        btn_calibrate->labelsize(11);
      } // Fl_Button* btn_calibrate
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(420, 65, 90, 65);
      o->box(FL_BORDER_FRAME);
      o->color(FL_FOREGROUND_COLOR);
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(485, 45, 195, 105, catgets(_catalog,1,8,"RTL-SDR"));
      o->box(FL_BORDER_BOX);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(255, 45, 195, 105, catgets(_catalog,1,9,"Antenna"));
      o->box(FL_BORDER_BOX);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      { Fl_Button* o = new Fl_Button(310, 115, 90, 25, catgets(_catalog,1,10,"Measure"));
        o->labelsize(11);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Double_Window* make_about_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(270, 210);
    w = o; if (w) {/* empty */}
    o->labeltype(FL_NO_LABEL);
    o->align(Fl_Align(FL_ALIGN_TOP));
    { new Fl_Text_Display(55, 35, 160, 110, catgets(_catalog,1,11,"nbima"));
    } // Fl_Text_Display* o
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Slider *dc_coef_slider=(Fl_Slider *)0;

static void cb_dc_coef_slider(Fl_Slider* o, void*) {
  dc_coef_input->value(o->value());
}

Fl_Value_Input *dc_coef_input=(Fl_Value_Input *)0;

static void cb_dc_coef_input(Fl_Value_Input* o, void*) {
  dc_coef_slider->value(o->value());
}

Fl_Double_Window* make_dsp_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(330, 65, catgets(_catalog,1,12,"DSP parameters"));
    w = o; if (w) {/* empty */}
    o->labeltype(FL_NO_LABEL);
    o->align(Fl_Align(FL_ALIGN_TOP));
    o->hotspot(o);
    { dc_coef_slider = new Fl_Slider(150, 35, 170, 20);
      dc_coef_slider->type(1);
      dc_coef_slider->labelsize(12);
      dc_coef_slider->value(1);
      dc_coef_slider->callback((Fl_Callback*)cb_dc_coef_slider);
      dc_coef_slider->align(Fl_Align(FL_ALIGN_LEFT_TOP));
    } // Fl_Slider* dc_coef_slider
    { dc_coef_input = new Fl_Value_Input(150, 10, 170, 20, catgets(_catalog,1,13,"DC blocker coefficient"));
      dc_coef_input->labelsize(12);
      dc_coef_input->value(1);
      dc_coef_input->textsize(12);
      dc_coef_input->callback((Fl_Callback*)cb_dc_coef_input);
    } // Fl_Value_Input* dc_coef_input
    o->end();
  } // Fl_Double_Window* o
  return w;
}

GUI_Spectre *noise_spectre_box=(GUI_Spectre *)0;

Fl_Double_Window* make_measurement_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(800, 175, catgets(_catalog,1,14,"Noise measurement"));
    w = o; if (w) {/* empty */}
    o->labeltype(FL_NO_LABEL);
    o->align(Fl_Align(FL_ALIGN_TOP));
    { Fl_Group* o = new Fl_Group(0, 35, 800, 150);
      { noise_spectre_box = new GUI_Spectre(0, 35, 800, 140, catgets(_catalog,1,15,"Estimated noise spectrum"));
        noise_spectre_box->box(FL_FLAT_BOX);
        noise_spectre_box->color(FL_FOREGROUND_COLOR);
        noise_spectre_box->selection_color(FL_BACKGROUND_COLOR);
        noise_spectre_box->labeltype(FL_NO_LABEL);
        noise_spectre_box->labelfont(0);
        noise_spectre_box->labelsize(11);
        noise_spectre_box->labelcolor(FL_FOREGROUND_COLOR);
        noise_spectre_box->align(Fl_Align(FL_ALIGN_TOP));
        noise_spectre_box->when(FL_WHEN_RELEASE);
        noise_spectre_box->window()->hotspot(noise_spectre_box);
      } // GUI_Spectre* noise_spectre_box
      o->end();
      Fl_Group::current()->resizable(o);
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(0, 0, 800, 35);
      { Fl_Group* o = new Fl_Group(5, 0, 155, 35);
        { Fl_Button* o = new Fl_Button(5, 5, 25, 25, catgets(_catalog,1,16,"\342\217\265"));
          o->labelsize(18);
          o->labelcolor((Fl_Color)62);
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(35, 5, 25, 25, catgets(_catalog,1,17,"\342\217\271"));
          o->labelcolor((Fl_Color)80);
        } // Fl_Button* o
        { Fl_Value_Input* o = new Fl_Value_Input(95, 5, 65, 25);
          o->value(100);
        } // Fl_Value_Input* o
        { Fl_Button* o = new Fl_Button(65, 5, 25, 25, catgets(_catalog,1,18,"\342\217\217"));
          o->labelsize(12);
        } // Fl_Button* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(165, 5, 635, 25);
        o->end();
        Fl_Group::current()->resizable(o);
      } // Fl_Group* o
      o->end();
    } // Fl_Group* o
    o->end();
  } // Fl_Double_Window* o
  return w;
}
